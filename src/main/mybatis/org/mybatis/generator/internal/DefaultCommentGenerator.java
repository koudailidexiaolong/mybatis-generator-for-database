/**
 *    Copyright 2006-2018 the original author or authors.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package org.mybatis.generator.internal;

import static org.mybatis.generator.internal.util.StringUtility.isTrue;

import java.text.SimpleDateFormat;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.Set;

import org.mybatis.generator.api.CommentGenerator;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.MyBatisGenerator;
import org.mybatis.generator.api.dom.java.CompilationUnit;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.InnerClass;
import org.mybatis.generator.api.dom.java.InnerEnum;
import org.mybatis.generator.api.dom.java.JavaElement;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.config.MergeConstants;
import org.mybatis.generator.config.PropertyRegistry;
import org.mybatis.generator.internal.util.StringUtility;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Jeff Butler
 * 默认描述信息生成类
 */
public class DefaultCommentGenerator implements CommentGenerator {

	private static final Logger logger = LoggerFactory.getLogger(DefaultCommentGenerator.class);
	
	private Properties properties;

	/**
	 * 是否阻止生成时间注释
	 * @author julong
	 * @date 2021年10月25日 下午12:23:34
	 */
	private boolean suppressDate;

	/**
	 * 是否阻止生成所有的文档注释
	 * @author julong
	 * @date 2021年10月25日 下午1:04:07
	 */
	private boolean suppressAllComments;

	/** If suppressAllComments is true, this option is ignored. */
	/**
	 * 增加评论
	 * @author julong
	 * @date 2021年10月25日 下午1:05:34
	 */
	private boolean addRemarkComments;

	/**
	 * 是否阻止生成详细注释
	 * @author julong
	 * @date 2021年10月25日 下午12:14:37
	 */
	private boolean suppressDefaultDescription;

	/**
	 * 是否阻止xml文件中生成注释
	 * @author julong
	 * @date 2021年10月25日 下午12:14:43
	 */
	private boolean suppressXMLComments;

	/**
	 * 是否阻止生成方法注释
	 * @author julong
	 * @date 2021年10月25日 下午12:14:48
	 */
	private boolean suppressMethodComments;


	/**
	 * 日期对象
	 * @author julong
	 * @date 2021年10月25日 下午12:23:22
	 */
	private SimpleDateFormat dateFormat;


	/**
	 * 是否阻止生成判断条件中的空字符串判断
	 * @author julong
	 * @date 2021年10月25日 下午12:23:22
	 */
	private boolean suppressXMLMethodEmptyString;

	/**
	 * 构造函数中设置默认属性默认值
	 * @author julong
	 * @date 2021年10月25日 下午1:05:48
	 */
	public DefaultCommentGenerator() {
		super();
		this.properties = new Properties();
		this.suppressDate = false;
		this.suppressAllComments = false;
		this.addRemarkComments = false;
		this.suppressDefaultDescription = false;
		this.suppressXMLComments = false;
		this.suppressMethodComments = false;
		this.suppressXMLMethodEmptyString = false;
	}

	@Override
	public void addJavaFileComment(CompilationUnit compilationUnit) {
		// add no file level comments by default
		logger.info("【文档注释类】-生成文件注释");
	}

	/**
	 * Adds a suitable comment to warn users that the element was generated, and when it was generated.
	 *
	 * @param xmlElement
	 *            the xml element
	 */
	@Override
	public void addComment(XmlElement xmlElement) {
		//是否阻止生成所有的注释  默认不阻止生成注释 
		if (this.suppressAllComments) {
			return;
		}
		//是否阻止xml中生成注释
		if (this.suppressXMLComments) {
			return;
		}
		xmlElement.addElement(new TextElement("<!--")); //$NON-NLS-1$

		StringBuilder sb = new StringBuilder();
		sb.append("  INFO - "); //$NON-NLS-1$
		sb.append(MergeConstants.NEW_ELEMENT_TAG);
		xmlElement.addElement(new TextElement(sb.toString()));
		//是否阻止增加详细信息描述注释
		if(this.suppressDefaultDescription == false){
			xmlElement.addElement(new TextElement("  This element is automatically generated by MyBatis Generator, do not modify.")); //$NON-NLS-1$
		}
		String s = getDateString();
		if (s != null) {
			sb.setLength(0);
			sb.append("  This element was generated on "); //$NON-NLS-1$
			sb.append(s);
			sb.append('.');
			xmlElement.addElement(new TextElement(sb.toString()));
		}

		xmlElement.addElement(new TextElement("-->")); //$NON-NLS-1$
	}

	@Override
	public void addRootComment(XmlElement rootElement) {
		// add no document level comments by default
	}

	//添加自定义属性配置读取配置中的变量
	@Override
	public void addConfigurationProperties(Properties properties) {
		this.properties.putAll(properties);
		//判断是否生成日期 此处获得 配置文件中的 属性
		this.suppressDate = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_DATE));
		//生成所有的描述信息
		this.suppressAllComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS));
		//备注信息描述
		this.addRemarkComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_ADD_REMARK_COMMENTS));
		//文件中是否生成默认描述
		this.suppressDefaultDescription = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_DEFAULT_DESCRIPTION));
		//xml文件中是否生成注释
		this.suppressXMLComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_XML_COMMENTS));
		//生成的方法是否增加默认注释
		this.suppressMethodComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_METHOD_COMMENTS));
		//xmlsql文件中if条件是否增加 空字符串判断 
		this.suppressXMLMethodEmptyString = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_XML_METHOD_EMPTY_STRING));

		//日期格式化
		String dateFormatString = properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_DATE_FORMAT);
		if (StringUtility.stringHasValue(dateFormatString)) {
			this.dateFormat = new SimpleDateFormat(dateFormatString);
		}
	}

	/**
	 * This method adds the custom javadoc tag for. You may do nothing if you do not wish to include the Javadoc tag -
	 * however, if you do not include the Javadoc tag then the Java merge capability of the eclipse plugin will break.
	 * 文档注释 增加作者信息
	 * @param javaElement
	 *            the java element
	 * @param markAsDoNotDelete
	 *            the mark as do not delete
	 */
	protected void addJavadocTag(JavaElement javaElement,boolean markAsDoNotDelete) {
		javaElement.addJavaDocLine(" * " + MergeConstants.NEW_ELEMENT_TAG); //$NON-NLS-1$  去掉方法中间的空白行
		StringBuilder sb = new StringBuilder();
		sb.append(" * "); //$NON-NLS-1$
		sb.append(MergeConstants.NEW_ELEMENT_DATE_TAG);
		if (markAsDoNotDelete) {
			sb.append(" do_not_delete_during_merge"); //$NON-NLS-1$
		}
		String s = getDateString();
		if (s != null) {
			sb.append(' ');
			sb.append(s);
		}
		javaElement.addJavaDocLine(sb.toString());
	}

	/**
	 * Returns a formated date string to include in the Javadoc tag
	 * and XML comments. You may return null if you do not want the date in
	 * these documentation elements.
	 * 
	 * @return a string representing the current timestamp, or null
	 */
	protected String getDateString() {
		//是否阻止日期注释生成
		if (this.suppressDate) {
			return null;
		} else if (this.dateFormat != null) {
			return this.dateFormat.format(new Date());
		} else {
			return new Date().toString();
		}
	}
	//类注释
	@Override
	public void addClassComment(InnerClass innerClass,IntrospectedTable introspectedTable) {
		logger.debug("【文档注释类】-生成类注释-introspectedTable：{}",introspectedTable.getFullyQualifiedTable());
		if (this.suppressAllComments) {
			return;
		}
		innerClass.addJavaDocLine("/**"); //$NON-NLS-1$
		if(this.suppressDefaultDescription == false){
			StringBuilder sb = new StringBuilder();
			innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator."); //$NON-NLS-1$
			sb.append(" * This class corresponds to the database table "); //$NON-NLS-1$
			sb.append(introspectedTable.getFullyQualifiedTable());
			innerClass.addJavaDocLine(sb.toString());
		}

		addJavadocTag(innerClass, false);

		innerClass.addJavaDocLine(" */"); //$NON-NLS-1$
	}
	//类注释
	@Override
	public void addClassComment(InnerClass innerClass,IntrospectedTable introspectedTable, boolean markAsDoNotDelete) {
		System.out.println("addClassComment走这个方法2");
		if (this.suppressAllComments) {
			return;
		}
	
		StringBuilder sb = new StringBuilder();

		innerClass.addJavaDocLine("/**"); //$NON-NLS-1$
		
		if(this.suppressDefaultDescription == false){
			innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator."); //$NON-NLS-1$
		}
		sb.append(" * This class corresponds to the database table "); //$NON-NLS-1$
		sb.append(introspectedTable.getFullyQualifiedTable());
		innerClass.addJavaDocLine(sb.toString());

		addJavadocTag(innerClass, markAsDoNotDelete);

		innerClass.addJavaDocLine(" */"); //$NON-NLS-1$
	}

	//实体类上增加注释
	@Override
	public void addModelClassComment(TopLevelClass topLevelClass,IntrospectedTable introspectedTable) {
		System.out.println("addModelClassComment走这个方法1");
		if (this.suppressAllComments) {
			return;
		}
		topLevelClass.addJavaDocLine("/**"); //$NON-NLS-1$
		
		String remarks = introspectedTable.getRemarks();
		
		if (this.addRemarkComments && StringUtility.stringHasValue(remarks)) {
			//是否阻止增加默认注释
			if(this.suppressDefaultDescription == false){
				topLevelClass.addJavaDocLine(" * <p>Database Table Remarks:</p>"); //$NON-NLS-1$
			}
			String[] remarkLines = remarks.split(System.getProperty("line.separator"));  //$NON-NLS-1$
			for (String remarkLine : remarkLines) {
				topLevelClass.addJavaDocLine(" * " + remarkLine);  //$NON-NLS-1$
			}
		}
	
		
		topLevelClass.addJavaDocLine(" *"); //$NON-NLS-1$
		//是否阻止增加默认注释
		if(this.suppressDefaultDescription == false){
			topLevelClass.addJavaDocLine(" * <p>This class was generated by MyBatis Generator.</p>"); //$NON-NLS-1$
		}
		StringBuilder sb = new StringBuilder();
		sb.append(" * <p>This class corresponds to the database table "); //$NON-NLS-1$
		sb.append(introspectedTable.getFullyQualifiedTable());
		sb.append("</p>");
		sb.append(introspectedTable.getRemarks());
		topLevelClass.addJavaDocLine(sb.toString());
		addJavadocTag(topLevelClass, false);
		topLevelClass.addJavaDocLine(" */"); //$NON-NLS-1$
	}
	//枚举注释
	@Override
	public void addEnumComment(InnerEnum innerEnum, IntrospectedTable introspectedTable) {
		if (suppressAllComments) {
			return;
		}

		StringBuilder sb = new StringBuilder();

		innerEnum.addJavaDocLine("/**"); //$NON-NLS-1$
		if(this.suppressDefaultDescription == false){
			innerEnum.addJavaDocLine(" * <p>This enum was generated by MyBatis Generator.</p>"); //$NON-NLS-1$
			sb.append(" * <p>This enum corresponds to the database table "); //$NON-NLS-1$
			sb.append(introspectedTable.getFullyQualifiedTable());
			sb.append("</p>");
			innerEnum.addJavaDocLine(sb.toString());
		}

		addJavadocTag(innerEnum, false);

		innerEnum.addJavaDocLine(" */"); //$NON-NLS-1$
	}
	//生成的类中的字段注释
	@Override
	public void addFieldComment(Field field,IntrospectedTable introspectedTable,IntrospectedColumn introspectedColumn) {
		if (this.suppressAllComments) {
			return;
		}

		field.addJavaDocLine("/**"); //$NON-NLS-1$

		String remarks = introspectedColumn.getRemarks();
		if (this.addRemarkComments && StringUtility.stringHasValue(remarks)) {
			//是否阻止生成默认注释
			if(this.suppressDefaultDescription == false){
				field.addJavaDocLine(" * <p>Database Column Remarks:</p>"); //$NON-NLS-1$
			}
			String[] remarkLines = remarks.split(System.getProperty("line.separator"));  //$NON-NLS-1$
			
			for (String remarkLine : remarkLines) {
				field.addJavaDocLine(" * " + remarkLine);  //$NON-NLS-1$
			}
		}
		StringBuilder sb = new StringBuilder();
		//是否阻止生成默认注释
		if(this.suppressDefaultDescription == false){
			field.addJavaDocLine(" *"); //$NON-NLS-1$
			field.addJavaDocLine(" * <p>This field was generated by MyBatis Generator.</p>"); //$NON-NLS-1$
			sb.append(" * <p>This field corresponds to the database column "); //$NON-NLS-1$
			sb.append(introspectedTable.getFullyQualifiedTable());
			sb.append('.');
			sb.append(introspectedColumn.getActualColumnName());
			sb.append("</p>");
			field.addJavaDocLine(sb.toString());
			addJavadocTag(field, false);
		}
		
		
		field.addJavaDocLine(" */"); //$NON-NLS-1$
	}
	//属性注释
	@Override
	public void addFieldComment(Field field, IntrospectedTable introspectedTable) {
		if (this.suppressAllComments) {
			return;
		}

		StringBuilder sb = new StringBuilder();

		field.addJavaDocLine("/**"); //$NON-NLS-1$
		//阻止生成注释
		if(this.suppressDefaultDescription == false){
			field.addJavaDocLine(" * This field was generated by MyBatis Generator."); //$NON-NLS-1$
			sb.append(" * This field corresponds to the database table "); //$NON-NLS-1$
			sb.append(introspectedTable.getFullyQualifiedTable());
			field.addJavaDocLine(sb.toString());

			addJavadocTag(field, false);
		}

		field.addJavaDocLine(" */"); //$NON-NLS-1$
	}
	//方法注释
	@Override
	public void addGeneralMethodComment(Method method,IntrospectedTable introspectedTable) {
		if (this.suppressAllComments) {
			return;
		}
		//方法是否阻止增加默认注释
		if(this.suppressMethodComments){
			return;
		}
		method.addJavaDocLine("/**"); //$NON-NLS-1$
		
		//增加方法注释中文解释  //生成方法注释 delete* 删除 insert* 新增   update* 修改 select* 查询
		String methodName = method.getName();
		if(methodName.startsWith("insert")){
			method.addJavaDocLine(" * 新增" + introspectedTable.getRemarks());
		}else if(methodName.startsWith("updateByPrimaryKey")){
			method.addJavaDocLine(" * 根据主键修改" + introspectedTable.getRemarks());
		}else if(methodName.startsWith("update")){
			method.addJavaDocLine(" * 修改" + introspectedTable.getRemarks());
		}else if(methodName.startsWith("selectByPrimaryKey")){
			method.addJavaDocLine(" * 根据主键查询" + introspectedTable.getRemarks());
		}else if(methodName.startsWith("select")){
			method.addJavaDocLine(" * 查询" + introspectedTable.getRemarks());
		}else if(methodName.startsWith("deleteByPrimaryKey")){
			method.addJavaDocLine(" * 根据主键删除" + introspectedTable.getRemarks());
		}else if(methodName.startsWith("delete")){
			method.addJavaDocLine(" * 删除" + introspectedTable.getRemarks());
		}
		
		if(this.suppressDefaultDescription == false){
			StringBuilder sb = new StringBuilder();
			method.addJavaDocLine(" * <p>This method was generated by MyBatis Generator.</p>"); //$NON-NLS-1$
			sb.append(" * <p>This method corresponds to the database table "); //$NON-NLS-1$
			sb.append(introspectedTable.getFullyQualifiedTable());
			sb.append("</p>");
			method.addJavaDocLine(sb.toString());
		}
		
		List<Parameter> parameters = method.getParameters();
		//方法输入参数标识
		for (int i = 0; i < parameters.size(); i++) {
			method.addJavaDocLine(" * @param " + parameters.get(i).getName());
		}
		

		
		
		addJavadocTag(method, false);

		method.addJavaDocLine(" */"); //$NON-NLS-1$
	}
	//get方法增加的注释
	@Override
	public void addGetterComment(Method method,IntrospectedTable introspectedTable,IntrospectedColumn introspectedColumn) {
		if (this.suppressAllComments) {
			return;
		}

		StringBuilder sb = new StringBuilder();

		method.addJavaDocLine("/**"); //$NON-NLS-1$

		String remarks = introspectedColumn.getRemarks();
		if (this.addRemarkComments && StringUtility.stringHasValue(remarks)) {
			//是否阻止生成注释
			if(this.suppressDefaultDescription == false){
				method.addJavaDocLine(" * <p>Database Column Remarks:</p>"); //$NON-NLS-1$
			}
			String[] remarkLines = remarks.split(System.getProperty("line.separator"));  //$NON-NLS-1$
			for (String remarkLine : remarkLines) {
				method.addJavaDocLine(" * " + remarkLine);  //$NON-NLS-1$
			}
		}
		//是否阻止生成注释
		if(this.suppressDefaultDescription == false){
			method.addJavaDocLine(" * <p>This method was generated by MyBatis Generator.</p>"); //$NON-NLS-1$
			sb.append(" * <p>This method returns the value of the database column "); //$NON-NLS-1$
			sb.append(introspectedTable.getFullyQualifiedTable());
			sb.append('.');
			sb.append(introspectedColumn.getActualColumnName());
			sb.append("</p>");
			method.addJavaDocLine(sb.toString());
		}

		method.addJavaDocLine(" *"); //$NON-NLS-1$

		sb.setLength(0);
		sb.append(" * @return "); //$NON-NLS-1$
		//返回java类型
		sb.append(introspectedColumn.getFullyQualifiedJavaType());
		//是否阻止生成注释
		if(this.suppressDefaultDescription == false){
			sb.append("  the value of "); //$NON-NLS-1$
			sb.append(introspectedTable.getFullyQualifiedTable());
			sb.append('.');
			sb.append(introspectedColumn.getActualColumnName());
		
		}
		
		method.addJavaDocLine(sb.toString());

		//是否阻止生成注释
		if(this.suppressDefaultDescription == false){
			addJavadocTag(method, false);
		}

		method.addJavaDocLine(" */"); //$NON-NLS-1$
	}

	//set方法注释
	@Override
	public void addSetterComment(Method method,IntrospectedTable introspectedTable,IntrospectedColumn introspectedColumn) {
		if (this.suppressAllComments) {
			return;
		}

		StringBuilder sb = new StringBuilder();

		method.addJavaDocLine("/**"); //$NON-NLS-1$
		String remarks = introspectedColumn.getRemarks();
		if (this.addRemarkComments && StringUtility.stringHasValue(remarks)) {
			//是否阻止生成注释
			if(this.suppressDefaultDescription == false){
				method.addJavaDocLine(" * <p>Database Column Remarks:</p>"); //$NON-NLS-1$
			}
			String[] remarkLines = remarks.split(System.getProperty("line.separator"));  //$NON-NLS-1$
			for (String remarkLine : remarkLines) {
				method.addJavaDocLine(" * " + remarkLine);  //$NON-NLS-1$
			}
		}
		//阻止生成注释
		if(this.suppressDefaultDescription == false){
			method.addJavaDocLine(" * <p>This method was generated by MyBatis Generator.</p>"); //$NON-NLS-1$
			sb.append(" * <p>This method sets the value of the database column "); //$NON-NLS-1$
			sb.append(introspectedTable.getFullyQualifiedTable());
			sb.append('.');
			sb.append(introspectedColumn.getActualColumnName());
			sb.append("</p>");
			method.addJavaDocLine(sb.toString());
		}
		

		method.addJavaDocLine(" *"); //$NON-NLS-1$

		Parameter parm = method.getParameters().get(0);
		sb.setLength(0);
		sb.append(" * @param "); //$NON-NLS-1$
		sb.append(parm.getName());
		//是否阻止生成注释
		if(this.suppressDefaultDescription == false){
			sb.append(" the value for database column "); //$NON-NLS-1$
			sb.append(introspectedTable.getFullyQualifiedTable());
			sb.append('.');
			sb.append(introspectedColumn.getActualColumnName());
		}
		method.addJavaDocLine(sb.toString());

		//是否阻止生成注释
		if(this.suppressDefaultDescription == false){
			addJavadocTag(method, false);
		}
		method.addJavaDocLine(" */"); //$NON-NLS-1$
	}

	@Override
	public void addGeneralMethodAnnotation(Method method, IntrospectedTable introspectedTable,Set<FullyQualifiedJavaType> imports) {
		imports.add(new FullyQualifiedJavaType("javax.annotation.Generated")); //$NON-NLS-1$
		String comment = "Source Table: " + introspectedTable.getFullyQualifiedTable().toString(); //$NON-NLS-1$
		method.addAnnotation(getGeneratedAnnotation(comment));
	}

	@Override
	public void addGeneralMethodAnnotation(Method method, IntrospectedTable introspectedTable,IntrospectedColumn introspectedColumn, Set<FullyQualifiedJavaType> imports) {
		imports.add(new FullyQualifiedJavaType("javax.annotation.Generated")); //$NON-NLS-1$
		String comment = "Source field: " //$NON-NLS-1$
				+ introspectedTable.getFullyQualifiedTable().toString()
				+ "." //$NON-NLS-1$
				+ introspectedColumn.getActualColumnName();
		method.addAnnotation(getGeneratedAnnotation(comment));
	}

	@Override
	public void addFieldAnnotation(Field field, IntrospectedTable introspectedTable,Set<FullyQualifiedJavaType> imports) {
		imports.add(new FullyQualifiedJavaType("javax.annotation.Generated")); //$NON-NLS-1$
		String comment = "Source Table: " + introspectedTable.getFullyQualifiedTable().toString(); //$NON-NLS-1$
		field.addAnnotation(getGeneratedAnnotation(comment));
	}

	@Override
	public void addFieldAnnotation(Field field, IntrospectedTable introspectedTable,IntrospectedColumn introspectedColumn, Set<FullyQualifiedJavaType> imports) {
		imports.add(new FullyQualifiedJavaType("javax.annotation.Generated")); //$NON-NLS-1$
		String comment = "Source field: " //$NON-NLS-1$
				+ introspectedTable.getFullyQualifiedTable().toString()
				+ "." //$NON-NLS-1$
				+ introspectedColumn.getActualColumnName();
		field.addAnnotation(getGeneratedAnnotation(comment));

		if (!suppressAllComments && addRemarkComments) {
			String remarks = introspectedColumn.getRemarks();
			if (addRemarkComments && StringUtility.stringHasValue(remarks)) {
				field.addJavaDocLine("/**"); //$NON-NLS-1$
				field.addJavaDocLine(" * Database Column Remarks:"); //$NON-NLS-1$
				String[] remarkLines = remarks.split(System.getProperty("line.separator"));  //$NON-NLS-1$
				for (String remarkLine : remarkLines) {
					field.addJavaDocLine(" *   " + remarkLine);  //$NON-NLS-1$
				}
				field.addJavaDocLine(" */"); //$NON-NLS-1$
			}
		}
	}

	@Override
	public void addClassAnnotation(InnerClass innerClass, IntrospectedTable introspectedTable,Set<FullyQualifiedJavaType> imports) {
		imports.add(new FullyQualifiedJavaType("javax.annotation.Generated")); //$NON-NLS-1$
		String comment = "Source Table: " + introspectedTable.getFullyQualifiedTable().toString(); //$NON-NLS-1$
		innerClass.addAnnotation(getGeneratedAnnotation(comment));
	}

	private String getGeneratedAnnotation(String comment) {
		StringBuilder buffer = new StringBuilder();
		buffer.append("@Generated("); //$NON-NLS-1$
		if (suppressAllComments) {
			buffer.append('\"');
		} else {
			buffer.append("value=\""); //$NON-NLS-1$
		}

		buffer.append(MyBatisGenerator.class.getName());
		buffer.append('\"');

		if (!suppressDate && !suppressAllComments) {
			buffer.append(", date=\""); //$NON-NLS-1$
			buffer.append(DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(ZonedDateTime.now()));
			buffer.append('\"');
		}

		if (!suppressAllComments) {
			buffer.append(", comments=\""); //$NON-NLS-1$
			buffer.append(comment);
			buffer.append('\"');
		}

		buffer.append(')');
		return buffer.toString();
	}

	public boolean isSuppressXMLMethodEmptyString() {
		return suppressXMLMethodEmptyString;
	}

	public void setSuppressXMLMethodEmptyString(boolean suppressXMLMethodEmptyString) {
		this.suppressXMLMethodEmptyString = suppressXMLMethodEmptyString;
	}
}
